import os
import json
from typing import List
from fastapi import FastAPI, Request, Response, File, UploadFile
from fastapi.encoders import jsonable_encoder
from fastapi.responses import JSONResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from fastapi.middleware.wsgi import WSGIMiddleware

from flask import Flask, render_template, request, jsonify, url_for, safe_join, redirect, Response
import dash
import dash_html_components as html

try:
    from worker import celery
except ModuleNotFoundError:
    from .worker import celery
import celery.states as states

app = FastAPI()

SERVER_ROOT = os.path.dirname(__file__)

app.mount(
    "/static", StaticFiles(directory=os.path.join(SERVER_ROOT, "static")), name="static"
)

templates = Jinja2Templates(directory=os.path.join(SERVER_ROOT, "templates"))


# option for routing `@app.X` where `X` is one of
# post: to create data.
# get: to read data.
# put: to update data.
# delete: to delete data.

# while it might be tempting to use BackgroundTasks for oemof simulation, those might take up
# resources and it is better to start them in an independent process. BackgroundTasks are for
# not resource intensive processes(https://fastapi.tiangolo.com/tutorial/background-tasks/)


# `127.0.0.1:8000/docs` endpoint will have autogenerated docs for the written code

# Test Driven Development --> https://fastapi.tiangolo.com/tutorial/testing/

# integrate the flask server and a plotly dash app
flask_server = Flask(
        __name__,
        static_folder='static',
        instance_relative_config=True,
    )

# Initialize the app
dash_app = dash.Dash(
    server=flask_server,
    requests_pathname_prefix="/report/"
)

dash_app.layout = html.Div("My Dash app")

app.mount("/report", WSGIMiddleware(flask_server))


@app.get("/")
def index(request: Request) -> Response:
    return templates.TemplateResponse("index.html", {"request": request})


@app.post("/sendjson/")
async def simulate_json_variable(request: Request):
    """Receive mvs simulation parameter in json post request and send it to simulator"""
    input_json = await request.json()

    # send the task to celery
    task = celery.send_task("tasks.run_simulation", args=[json.dumps(input_json)], kwargs={})

    return check_task(task.id)


@app.post("/uploadjson/")
def simulate_uploaded_json_files(request: Request, json_file: UploadFile = File(...)):
    """Receive mvs simulation parameter in json post request and send it to simulator
    the value of `name` property of the input html tag should be `json_file` as the second
    argument of this function
    """
    json_content = jsonable_encoder(json_file.file.read())
    return run_simulation(request, json_dict=json_content)


@app.post("/run_simulation")
def run_simulation(request: Request, json_dict=None) -> Response:
    """Send a simulation task to a celery worker"""

    if json_dict is None:
        input_json = {
            "name": "dummy_json_input",
            "secondary_dict": {"val1": 2, "val2": [5, 6, 7, 8]},
        }
    else:
        input_json = json_dict

    # send the task to celery
    task = celery.send_task("tasks.run_simulation", args=[input_json], kwargs={})

    return templates.TemplateResponse(
        "submitted_task.html", {"request": request, "task_id": task.id}
    )


@app.get("/check/{task_id}")
async def check_task(task_id: str) -> JSONResponse:
    res = celery.AsyncResult(task_id)
    if res.state == states.PENDING:
        answer = res.state
    else:
        answer = res.result
    return JSONResponse(content=jsonable_encoder(answer))
